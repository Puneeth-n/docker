<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.1">
  <actions/>
  <description>[Jenkins git client plugin](https://github.com/jenksci/git-client-plugin)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>TEST_ALL_CREDENTIALS</name>
          <description>Run all credential tests (rather than a random subset)</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.2">
    <script>node {
  // Mark the code checkout &apos;stage&apos;....
  stage &apos;Checkout&apos;

  // Get some code from a GitHub repository
  // git url: &apos;https://github.com/jenkinsci/git-client-plugin.git&apos;
  // Checkout code from repository
  checkout([$class: &apos;GitSCM&apos;,
            branches: [[name: &apos;*/master&apos;]],
            browser: [$class: &apos;GithubWeb&apos;, repoUrl: &apos;https://github.com/jenkinsci/git-client-plugin&apos;],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: &apos;LocalBranch&apos;, localBranch: &apos;**&apos;]],
            gitTool: &apos;Default&apos;,
            submoduleCfg: [],
            userRemoteConfigs: [[url: &apos;git://github.com/jenkinsci/git-client-plugin.git&apos;]]
           ]
          )

  // Mark the code build &apos;stage&apos;....
  stage &apos;Build&apos;
  // Run the maven build
  withEnv([&quot;JAVA_HOME=${ tool &apos;oracle-java-7&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;maven-latest&apos;}/bin:${env.JAVA_HOME}/bin&quot;]) {
    // Apache Maven related side notes:
    // -B : batch mode (less logs)
    // -V : display the JDK and Maven versions (sanity check)
    // -U : update snapshots each build (rather than hourly)
    // -e : produce execution error messages (easier diagnosis)
    // -Dsurefire.useFile=false : Display test errors in the logs
    //                            directly (instead of having to crawl
    //                            the workspace files to see the
    //                            cause).
    // -Dmaven.test.failure.ignore=true : Display test errors in the
    //                            logs directly (instead of having to
    //                            crawl the workspace files to see the
    //                            cause).
    def switches = &quot;-B -V -U -e -Dsurefire.useFile=false -Dmaven.test.failure.ignore=true&quot;
    def parameters = &quot;-DTEST_ALL_CREDENTIALS=${TEST_ALL_CREDENTIALS}&quot;
    if (isUnix()) {
      sh  &quot;mvn ${switches} clean install ${parameters}&quot;
    } else {
      bat &quot;mvn ${switches} clean install ${parameters}&quot;
    }
  }

  // Results stage - remember things about the build ....
  stage &apos;Results&apos;
  step([$class: &apos;JUnitResultArchiver&apos;, testResults: &apos;**/target/surefire-reports/TEST-*.xml&apos;])
  // step([$class: &apos;ArtifactArchiver&apos;, artifacts: &apos;**/target/*.*pi&apos;, fingerprint: true])
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec></spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
</flow-definition>
